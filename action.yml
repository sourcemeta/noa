name: Sourcemeta
description: Continuous Integration

inputs:
  step:
    description: Step to run
    required: true
  mode:
    description: Static vs shared
    required: false
    default: static
  options:
    description: Additional CMake options
    required: false
    default: ''

runs:
  using: composite
  steps:
    #############################################
    # Dependencies
    #############################################

    # ClangFormat
    - if: runner.os == 'windows' && inputs.step == 'dependencies'
      shell: pwsh
      run: pip install clang-format==18.1.5
    - if: runner.os != 'windows' && inputs.step == 'dependencies'
      shell: bash
      run: pip install clang-format==18.1.5

    # Brewfile
    - if: runner.os == 'macos' && inputs.step == 'dependencies'
      run: brew install cmake doxygen && if [ -f Brewfile ]; then brew bundle; fi
      shell: bash
      env:
        HOMEBREW_NO_ANALYTICS: 1
        HOMEBREW_NO_AUTO_UPDATE: 1

    # ShellCheck
    - if: runner.os == 'windows' && inputs.step == 'dependencies'
      shell: pwsh
      run: choco install shellcheck

    #############################################
    # Configure
    #############################################

    - if: runner.os == 'windows' && inputs.step == 'configure'
      run: cmake --version
      shell: pwsh
    - if: runner.os != 'windows' && inputs.step == 'configure'
      run: cmake --version
      shell: bash

    - if: runner.os == 'windows' && inputs.step == 'configure' && inputs.mode == 'static'
      shell: pwsh
      run: >
        cmake -S . -B ./build
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DCMAKE_COMPILE_WARNING_AS_ERROR:BOOL=ON
        ${{ inputs.options }}
    - if: runner.os == 'windows' && inputs.step == 'configure' && inputs.mode == 'shared'
      shell: pwsh
      run: >
        cmake -S . -B ./build
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DBUILD_SHARED_LIBS:BOOL=ON
        -DCMAKE_COMPILE_WARNING_AS_ERROR:BOOL=ON
        ${{ inputs.options }}
    - if: runner.os != 'windows' && inputs.step == 'configure' && inputs.mode == 'static'
      shell: bash
      run: >
        cmake -S . -B ./build
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DBUILD_SHARED_LIBS:BOOL=OFF
        -DCMAKE_COMPILE_WARNING_AS_ERROR:BOOL=ON
        ${{ inputs.options }}
    - if: runner.os != 'windows' && inputs.step == 'configure' && inputs.mode == 'shared'
      shell: bash
      run: >
        cmake -S . -B ./build
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DBUILD_SHARED_LIBS:BOOL=ON
        -DCMAKE_COMPILE_WARNING_AS_ERROR:BOOL=ON
        ${{ inputs.options }}

    #############################################
    # Build
    #############################################

    - if: runner.os == 'windows' && inputs.step == 'build'
      shell: pwsh
      run: cmake --build ./build --config Release --parallel 4
    - if: runner.os != 'windows' && inputs.step == 'build'
      shell: bash
      run: cmake --build ./build --config Release --parallel 4

    #############################################
    # Test
    #############################################

    # Not every CTest version supports the --test-dir option. If such option
    # is not recognized, `ctest` will successfully exit finding no tests.
    # Better to be sure and `cd` all the time here.
    - if: runner.os == 'windows' && inputs.step == 'test'
      shell: pwsh
      run: cd ./build && ctest --build-config Release --output-on-failure --parallel
    - if: runner.os != 'windows' && inputs.step == 'test'
      shell: bash
      run: cd ./build && ctest --build-config Release --output-on-failure --parallel
      env:
        # See https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
        UBSAN_OPTIONS: print_stacktrace=1
